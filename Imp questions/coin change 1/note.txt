class Solution {
public:
	int solve(int numOfCoins, vector<int> &coins, int currAmount) {
		if(currAmount == 0) 
			return numOfCoins;
			
			int res = -1;
		for(int i = 0; i < coins.size(); i++) {
			if(currAmount - coins[i] >= 0) {
				res = solve(numOfCoins+1, coins,currAmount - coins[i]);
				if(res != -1)
					return res;
			}
		}
		return res;
	}
    int coinChange(vector<int>& coins, int amount) {
        // int ans = INT_MAX;
				sort(coins.begin(),coins.end(),greater<int>());
        return solve(0,coins,amount);
    }
};

/ since we are being greedy and try to pick the highest denomination possible the very first solutino that i will get will be the smalles one right?

//my second approach of greedy doesn't work for some cases:

1,3,4,5 : target = 7

here greedy will pick 5+1+1

but min coins are : 4+3